usage: viper [-h] [--version] [--debug]
             {init,run-job,run,task:from-func,task,task:results,task:format,hosts:from-file,hosts:from-func,hosts,hosts:filter,hosts:count,hosts:sort,hosts:pipe,hosts:format,hosts:where,hosts:task,hosts:run-task,hosts:results,runners:filter,runners:count,runners:sort,runners:pipe,runners:format,runners:where,runners:run,runners:hosts,results:from-history,results,results:filter,results:count,results:sort,results:pipe,results:format,results:where,results:final,results:hosts,results:runners,results:re-run,results:by-task}
             ...

Viper Infrastructure Commander v0.22.0

positional arguments:
  {init,run-job,run,task:from-func,task,task:results,task:format,hosts:from-file,hosts:from-func,hosts,hosts:filter,hosts:count,hosts:sort,hosts:pipe,hosts:format,hosts:where,hosts:task,hosts:run-task,hosts:results,runners:filter,runners:count,runners:sort,runners:pipe,runners:format,runners:where,runners:run,runners:hosts,results:from-history,results,results:filter,results:count,results:sort,results:pipe,results:format,results:where,results:final,results:hosts,results:runners,results:re-run,results:by-task}
    init                initialize the current workspace
    run-job             [Hosts -> Results] run a job on the given hosts
    run                 alias of 'run-job'
    task:from-func      [-> Task] get the task from a Python function location
    task                alias of 'task:from-func'
    task:results        [Task -> Results] get the past results of given task
    task:format         [Task -> str] format the data using the given template
    hosts:from-file     [-> Hosts] get a group of hosts from a file
    hosts:from-func     [-> Hosts] get a group of hosts from a Python function
                        location
    hosts               alias of 'hosts:from-func'
    hosts:filter        [Hosts -> Hosts] filter hosts by a given function
    hosts:count         [Hosts -> int] count the number of hosts
    hosts:sort          [Hosts -> Hosts] sort the hosts
    hosts:pipe          [Hosts -> ?] pipe the hosts to the given handler
    hosts:format        [Hosts -> str] format the data using the given
                        template
    hosts:where         [Hosts -> Hosts] select hosts matching the given query
    hosts:task          [Hosts -> Runners] assign a task to each host
    hosts:run-task      [Hosts -> Results] assign a task to each host and run
    hosts:results       [Hosts -> Results] get the past results of the hosts
    runners:filter      [Runners -> Runners] filter runners by a given
                        function
    runners:count       [Runners -> int] count the number of runners
    runners:sort        [Runners -> Runners] sort the runners
    runners:pipe        [Runners -> ?] pipe the runners to the given handler
    runners:format      [Runners -> str] format the data using the given
                        template
    runners:where       [Runners -> Runners] select runners matching the given
                        query
    runners:run         [Runners -> Results] run the assigned tasks
    runners:hosts       [Runners -> Hosts] get the hosts from the runners
    results:from-history
                        [-> Results] get the past results from database
    results             alias of 'results:from-history'
    results:filter      [Results -> Results] filter results by a given handler
    results:count       [Results -> int] count the number of results
    results:sort        [Results -> Results] sort the results
    results:pipe        [Results -> ?] pipe the results to the given handler
    results:format      [Results -> str] format the data using the given
                        template
    results:where       [Results -> Results] select results matching the given
                        query
    results:final       [Results -> Results] get the final results only
                        (ignoring the previous retries)
    results:hosts       [Results -> Hosts] get the hosts from the results
    results:runners     [Results -> Runners] recreate the runners from the
                        results
    results:re-run      [Results -> Results] recreate the runners from the
                        results and run again
    results:by-task     [Task -> Results] get the past results of given task

optional arguments:
  -h, --help            show this help message and exit
  --version             show program's version number and exit
  --debug               show traceback information when an exception is raised
